C51 COMPILER V9.60.0.0   I2C                                                               07/28/2022 10:18:35 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE StdDriver\src\i2c.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device\Include;.\S
                    -tdDriver\inc;.\Application) DEBUG OBJECTEXTEND PRINT(.\Listings\i2c.lst) TABS(2) OBJECT(.\Objects\i2c.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          
   8          #include "MS51_16K.h"
   9          
  10          /**
  11            * @brief      Enable specify I2C controller and set divider
  12            * @param[in]  u8I2CSel:  Specify I2C port
  13            *                  - \ref I2C0
  14            *                  - \ref I2C1
  15            * @param[in]  u32SYSCLK: Define Fsys clock value in Hz.
  16            *                  - \ref 8000000
  17            * @param[in]  u32I2CCLK: The target I2C bus clock in Hz. Use HIRC the I2C clock is from 23473 ~ 2000000
  18            * @return     None
  19            * @details    The function enable the specify I2C controller and set proper clock divider
  20            *             in I2C CLOCK DIVIDED REGISTER (I2CLK) according to the target I2C Bus clock.
  21            *             I2C bus clock = PCLK / (4*(u32I2CCLK+1).
  22            * @exmaple :  I2C_Open(24000000,100000);
  23            */
  24          void I2C_Master_Open(unsigned long u32SYSCLK, unsigned long u32I2CCLK)
  25          {
  26   1          SFRS = 0x00;
  27   1          I2CLK = (u32SYSCLK/4/u32I2CCLK-1); 
  28   1          set_I2CON_I2CEN;
  29   1      
  30   1      }
  31          
  32          /**
  33            * @brief      Enable specify I2C Slave address
  34            * @param[in]  u8I2CSel:  Specify I2C port
  35            *                  - \ref I2C0
  36            *                  - \ref I2C1
  37            * @param[in]  u32SYSCLK: Define Fsys clock value in Hz.
  38            *                  - \ref 8000000
  39            * @param[in]  u32I2CCLK: The target I2C bus clock in Hz. Use HIRC the I2C clock is from 23473 ~ 2000000
  40            * @return     None
  41            * @details    The function enable the specify I2C controller and set proper clock divider
  42            *             in I2C CLOCK DIVIDED REGISTER (I2CLK) according to the target I2C Bus clock.
  43            *             I2C bus clock = PCLK / (4*(u32I2CCLK+1).
  44            * @exmaple :  I2C_Open(0xA4);
  45            */
  46          void I2C_Slave_Open( unsigned char u8SlaveAddress0)
  47          {
  48   1              SFRS = 0; 
  49   1              I2ADDR = u8SlaveAddress0; 
C51 COMPILER V9.60.0.0   I2C                                                               07/28/2022 10:18:35 PAGE 2   

  50   1              set_I2CON_I2CEN;
  51   1              set_I2CON_AA;
  52   1      }
  53          /**
  54            * @brief      Disable I2C function
  55            * @param[in]  u8I2CSel:  Specify I2C port
  56            *                  - \ref I2C0
  57            *                  - \ref I2C1
  58            * @exmaple :  I2C0_Close(I2C0);
  59          */
  60          void I2C_Close(void)
  61          {
  62   1          SFRS = 0;
  63   1          clr_I2CON_I2CEN;
  64   1      }
  65          
  66          /**
  67            * @brief      Enable specify I2C controller interrupt, also need enable globle interrupt in main loop.
  68            * @param[in]  u8I2CSel:  Specify I2C port
  69            *                  - \ref I2C0
  70            *                  - \ref I2C1
  71            * @param[in]  u8I2CStatus:  Specify I2C interrupt status
  72            *                  - \ref Enable
  73            *                  - \ref Disable
  74            * @exmaple :  I2C_Interrupt();
  75          */
  76          void I2C_Interrupt(unsigned char u8I2CStatus)
  77          {
  78   1          SFRS = 0;
  79   1               switch (u8I2CStatus)
  80   1               {
  81   2                 case Enable: ENABLE_I2C_INTERRUPT; break;
  82   2                 case Disable: DISABLE_I2C_INTERRUPT; break;
  83   2               }
  84   1      }
  85          
  86          /**
  87            * @brief      Get I2C bus status value
  88            * @param[in]  u8I2CSel:  Specify I2C port
  89            * @param[in]  u8I2CSel:  Specify I2C port
  90            *                  - \ref I2C0
  91            *                  - \ref I2C1
  92            * @return     I2C status data 
  93            * @exmaple :  I2C_GetStatus(I2C0);
  94          */
  95          unsigned char I2C_GetStatus(void)
  96          {
  97   1          unsigned char u8i2cstat;
  98   1          SFRS = 0;
  99   1           u8i2cstat=I2STAT;
 100   1          return (u8i2cstat);
 101   1      }
 102          
 103          /**
 104           * @brief      Enable Time-out Function with support long time-out
 105           * @param[in]  u8I2CSel:  Specify I2C port
 106            *                  - \ref I2C0
 107            *                  - \ref I2C1
 108            * @param[in]  u8I2CTRStatus:  Specify I2C Timer status
 109            *                  - \ref Enable
 110            *                  - \ref Disable
 111           * @return     None
C51 COMPILER V9.60.0.0   I2C                                                               07/28/2022 10:18:35 PAGE 3   

 112           * @Note       This function enable time-out function and configure DIV4 to support longer time-out.
 113           * @example    I2C_Timeout(Enable);
 114           */
 115          void I2C_Timeout( unsigned char u8I2CTRStatus )
 116          {
 117   1              switch (u8I2CTRStatus)
 118   1              {
 119   2                case Enable: set_I2TOC_DIV; set_I2TOC_I2TOCEN; break;
 120   2                case Disable: clr_I2TOC_I2TOCEN; break;
 121   2              }
 122   1      }
 123          
 124          
 125          void I2C_ClearTimeoutFlag(void)
 126          {
 127   1          SFRS = 0;
 128   1          I2TOC&=0xFE; ;
 129   1      }
 130          
 131          /**
 132           * @brief      Special design for 8051 I2C SI check
 133           * @param[in]  none
 134           * @return     None
 135           * @details    This function setting the slave address mask bit.
 136           */
 137          void I2C0_SI_Check(void)
 138          {
 139   1          clr_I2CON_SI;
 140   1          
 141   1          while(I2CON&SET_BIT3)     /* while SI==0; */
 142   1          {
 143   2              if(I2STAT == 0x00)
 144   2              {
 145   3                  set_I2CON_STO;
 146   3              }
 147   2              SI = 0;
 148   2              if(!SI)
 149   2              {
 150   3                  clr_I2CON_I2CEN;
 151   3                  set_I2CON_I2CEN;
 152   3                  clr_I2CON_SI;
 153   3              } 
 154   2          }
 155   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    120    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
